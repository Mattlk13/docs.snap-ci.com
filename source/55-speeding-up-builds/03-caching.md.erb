---
title:  "Caching"
doc_title:  "Caching for faster builds on Snap CI"
---

When your build has dependencies or use other large files to run is better to
not download or generate them on every build. Snap provides a caching
feature to reduce time between builds by saving and restoring contents from a
cache directory. Snap makes available an environment variable called
`SNAP_CACHE_DIR` which will point to your cache directory.

> If you cancel your pipeline Snap will not save the cache for the cancelled
> pipeline so to avoid saving incomplete dependencies or corrupted files.

Let's say you need some SDK that is not provided out-of-the-box on Snap
machines and you do not want to download this SDK on every build as it will
take some time, all you need to do is to define a command to retrieve the SDK
and store it on the cache directory, like so:

~~~ shell
$ [[ -d ${SNAP_CACHE_DIR}/some_sdk ]] || ./download_sdk.sh ${SNAP_CACHE_DIR}/some_sdk
~~~

In the command above we test if `${SNAP_CACHE_DIR}/some_sdk` directory exists, if
not then we proceed to download our SDK using a simple script
`download_sdk.sh`. The script is just an example you could work with any script
you want.  On the next run, since the cached files will be restored and your
pipeline will skip the download of the SDK.

> You should always check for the presence of your cached files. Snap will 
> keep these files as long as possible but due to the nature of caching they
> might not always be available. In this case your command should bring the
> dependency back again.

# What should and should not be cached?

The cache feature is a way to improve the speed of your pipelines but is not a
permanent storage. Any large dependencies, or all of them, can be cached as
long you retrieve them back if the cached files are not available, examples:

* Large SDKs, like Android-SDK.
* Binaries that are not available on Snap machines.
* Libraries that are not available on Snap machines.

You might not want to cache:

* Build artifacts, these are handled differently and serve a different purpose.
* Logs and other byproducts of your build run.
* Files that are already available on Snap machines.

# What is persistent caching?

Snap's first version of caching deleted caches when Snap was deployed. As we practice Continuous Delivery this meant that build caches were removed very regularly and builds times were not consistent. We have since made changes so that the caching is "persistent" which means that we do not regularly remove caches when deploying and have moved to a more persistant storage mechanism. 
